# -*- coding: utf-8 -*-
"""BT21/7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Iw5mexA8nb_xFYSwCvUIHalgKSGNH-Q0
"""

import numpy as np

def compute_vector_length(vector):
    norm = np.sqrt(np.sum([v**2 for v in vector]))
    return norm
input_vector = np.array([1, 2, 3, 4])
norm = compute_vector_length([input_vector])
print(norm)
print(round(norm, 2))

def compute_vector_length_v2(vector):
    norm = np.linalg.norm(vector)#dung ham linalg de tinh do dai norm
    return norm
input_vector = np.array([1, 2, 3, 4])
norm = compute_vector_length_v2([input_vector])
print(norm)
print(round(norm, 2))

vector = np. array ([ -2 , 4 , 9 , 21])
result = compute_vector_length ([ vector ])
print ( round (result ,2) )

def compute_dot_product(v1, v2):
    dot_product = np.dot(v1, v2)
    return dot_product

v1 = np.array([1, 2, 3])
v2 = np.array([4, 5, 6])
v3 = np.array([1, 2, 3])
dot_product = compute_dot_product(v1, v2)
dot_product1 = compute_dot_product(v1, v3)
print(dot_product)
print(dot_product1)

v1 = np. array ([0 , 1 , -1 , 2])
v2 = np. array ([2 , 5 , 1 , 0])
result = compute_dot_product (v1 , v2)
print ( round (result ,2) )

v1 = np.array([1, 2, 3])
v2 = np.array([4, 5, 6])
v1.dot(v2) # =np.dot(v1, v2)
v2.dot(v1) # =np.dot(v1, v2)

v1 = np.array([1, 2, 3, 4])
v2 = np.array([4, 5, 6])

v1 = np.array([1, 2, 3])
v2 = np.array([4, 5, 6])
v1 @ v2 # =np.dot(v1, v2)

x = np. array ([[1 , 2] ,[3 , 4]])
k = np. array ([1 , 2])
print ('result \n', x.dot (k) )

x = np. array ([[ -1 , 2] ,[3 , -4]])
k = np. array ([1 , 2])
print ('result \n', x@k )

def matrix_multi_vector(matrix, vector):
    result = np.dot(matrix, vector)
    return result

v1 = np.array([[1, 2, 3], [4, 5, 6]])
print(v1.shape)

v2 = np.array([1, 2, 3])
v1@v2

m = np. array ([[ -1 , 1 , 1] , [0 , -4 , 9]])
v = np. array ([0 , 2 , 1])
result = matrix_multi_vector (m, v)
print ( result )

v1 = np.array([[1, 2, 3], [4, 5, 6]])
print(v1.shape)

v2 = np.array([[1, 2], [1, 2], [1, 2]])
print(v2.shape)
v1@v2

m1 = np. array ([[0 , 1 , 2] , [2 , -3 , 1]])
m2 = np. array ([[1 , -3] ,[6 , 1] , [0 , -1]])
m1@m2

m1 = np.eye (3)
m2 = np. array ([[1 , 1 , 1] ,[2 , 2 , 2] , [3 , 3 , 3]])
result = m1@m2
print ( result )

m1 = np.eye (2)
m1 = np. reshape (m1 ,( -1 ,4) ) [0]
m2 = np. array ([[1 , 1 , 1 , 1] ,[2 , 2 , 2 , 2] , [3 , 3 , 3 , 3] , [4 , 4 , 4 , 4]])
result = m1@m2
print ( result )

m1 = np. array ([[1 , 2] , [3 , 4]])
m1 = np. reshape (m1 ,( -1 ,4) , "F") [0]
m2 = np. array ([[1 , 1 , 1 , 1] ,[2 , 2 , 2 , 2] , [3 , 3 , 3 , 3] , [4 , 4 , 4 , 4]])
result = m1@m2
print ( result )

def inverse_matrix(matrix):
    inverse_matrix = np.linalg.inv(matrix)
    return inverse_matrix

m1 = np.array([[1, 2], [3, 4]])
inverse_m1 = inverse_matrix(m1)
print(inverse_m1)

i = m1 @ inverse_m1
i = np.round(i, 2)
print(i)
#ma tran co duong cheo = 1, cac vi tri con lai = 0, la MT don vi

m2 = np.array([[1, 2, 3], [3, 4, 6], [5, 6,7]])
inverse_m2 = inverse_matrix(m2)
print(inverse_m2)

m1 = np. array ([[ -2 , 6] , [8 , -4]])
result = inverse_matrix (m1)
print ( result )

"""Bai 2"""

def compute_eigen(matrix):
    eigenvalues, eigenvector = np.linalg.eig(matrix)
    return eigenvalues, eigenvector

e1 = np.array([[0,1], [-2, 5]])
print(e1.shape)
eigenvalues, eigenvector = compute_eigen(e1)
print(eigenvalues)
print(eigenvector)
#

matrix = np. array ([[0.9 , 0.2] , [0.1 , 0.8]])
eigenvalues , eigenvectors = compute_eigen ( matrix )
print ( eigenvectors )

"""bai 3"""

def compute_cosine_similarity(v1, v2):
    cosine_similarity = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))
    return cosine_similarity

v1 = np.array([1, 2, 3])
v2 = np.array([4, 5, 6])
cosine_similarity = compute_cosine_similarity(v1, v2)
print(cosine_similarity)

x = np. array ([1 , 2 , 3 , 4])
y = np. array ([1 , 0 , 3 , 0])
result = compute_cosine_similarity (x,y)
print ( round (result , 3) )

"""bai 4"""

import numpy as np
import cv2
from google.colab.patches import cv2_imshow

background_img_1 = cv2.imread('/content/GreenBackground.png', 1)
background_img_2 = cv2.imread('/content/NewBackground.jpg', 1)
background_img_3 = cv2.imread('/content/Object.png', 1)

print(background_img_1.shape)
print(background_img_2.shape)
print(background_img_3.shape)

cv2_imshow(background_img_1)
cv2_imshow(background_img_2)
cv2_imshow(background_img_3)

#resize image: chuyen cac anh sao cho kich thc = nhau
IMAGE_SIZE = (678, 381)# kich thc = bao nhieu cung dc, w,h

background_img_1_rs = cv2.resize(background_img_1, IMAGE_SIZE)
background_img_2_rs = cv2.resize(background_img_2, IMAGE_SIZE)
background_img_3_rs = cv2.resize(background_img_3, IMAGE_SIZE)

print(background_img_1_rs.shape)
print(background_img_2_rs.shape)
print(background_img_3_rs.shape)

cv2_imshow(background_img_1_rs)
cv2_imshow(background_img_2_rs)
cv2_imshow(background_img_3_rs)

differences = cv2.absdiff(background_img_1_rs, background_img_3_rs)#
cv2_imshow(differences)
print(differences.shape)

differences_single = np.sum(differences, axis=2) / 3.0 #sum theo chieu channel
print(type(differences_single[0][0]))
#chuyen float 64 thanh unit 8 de tinh toan cho de
differences_single = differences_single.astype(np.uint8)
print(type(differences_single[0][0]))

print(differences_single.shape)
cv2_imshow(differences_single)

binary_img = np.where(differences_single > 10, 255, 0)#.astype(np.uint8)
binary_img = np.stack([binary_img, binary_img, binary_img], axis=-1)
cv2_imshow(binary_img)
print(binary_img.shape)
print(type(binary_img[0][0]))

output = np.where(binary_img == 255, background_img_3, background_img_2)
cv2_imshow(output)

